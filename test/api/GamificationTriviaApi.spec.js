/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KnetikCloud);
  }
}(this, function(expect, KnetikCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KnetikCloud.GamificationTriviaApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GamificationTriviaApi', function() {
    describe('addQuestionAnswers', function() {
      it('should call addQuestionAnswers successfully', function(done) {
        //uncomment below and update the code to test addQuestionAnswers
        //instance.addQuestionAnswers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addQuestionTag', function() {
      it('should call addQuestionTag successfully', function(done) {
        //uncomment below and update the code to test addQuestionTag
        //instance.addQuestionTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTagToQuestionsBatch', function() {
      it('should call addTagToQuestionsBatch successfully', function(done) {
        //uncomment below and update the code to test addTagToQuestionsBatch
        //instance.addTagToQuestionsBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImportJob', function() {
      it('should call createImportJob successfully', function(done) {
        //uncomment below and update the code to test createImportJob
        //instance.createImportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createQuestion', function() {
      it('should call createQuestion successfully', function(done) {
        //uncomment below and update the code to test createQuestion
        //instance.createQuestion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createQuestionTemplate', function() {
      it('should call createQuestionTemplate successfully', function(done) {
        //uncomment below and update the code to test createQuestionTemplate
        //instance.createQuestionTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteImportJob', function() {
      it('should call deleteImportJob successfully', function(done) {
        //uncomment below and update the code to test deleteImportJob
        //instance.deleteImportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteQuestion', function() {
      it('should call deleteQuestion successfully', function(done) {
        //uncomment below and update the code to test deleteQuestion
        //instance.deleteQuestion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteQuestionAnswers', function() {
      it('should call deleteQuestionAnswers successfully', function(done) {
        //uncomment below and update the code to test deleteQuestionAnswers
        //instance.deleteQuestionAnswers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteQuestionTemplate', function() {
      it('should call deleteQuestionTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteQuestionTemplate
        //instance.deleteQuestionTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImportJob', function() {
      it('should call getImportJob successfully', function(done) {
        //uncomment below and update the code to test getImportJob
        //instance.getImportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImportJobs', function() {
      it('should call getImportJobs successfully', function(done) {
        //uncomment below and update the code to test getImportJobs
        //instance.getImportJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestion', function() {
      it('should call getQuestion successfully', function(done) {
        //uncomment below and update the code to test getQuestion
        //instance.getQuestion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestionAnswer', function() {
      it('should call getQuestionAnswer successfully', function(done) {
        //uncomment below and update the code to test getQuestionAnswer
        //instance.getQuestionAnswer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestionAnswers', function() {
      it('should call getQuestionAnswers successfully', function(done) {
        //uncomment below and update the code to test getQuestionAnswers
        //instance.getQuestionAnswers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestionDeltas', function() {
      it('should call getQuestionDeltas successfully', function(done) {
        //uncomment below and update the code to test getQuestionDeltas
        //instance.getQuestionDeltas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestionTags', function() {
      it('should call getQuestionTags successfully', function(done) {
        //uncomment below and update the code to test getQuestionTags
        //instance.getQuestionTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestionTemplate', function() {
      it('should call getQuestionTemplate successfully', function(done) {
        //uncomment below and update the code to test getQuestionTemplate
        //instance.getQuestionTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestionTemplates', function() {
      it('should call getQuestionTemplates successfully', function(done) {
        //uncomment below and update the code to test getQuestionTemplates
        //instance.getQuestionTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestions', function() {
      it('should call getQuestions successfully', function(done) {
        //uncomment below and update the code to test getQuestions
        //instance.getQuestions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQuestionsCount', function() {
      it('should call getQuestionsCount successfully', function(done) {
        //uncomment below and update the code to test getQuestionsCount
        //instance.getQuestionsCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('processImportJob', function() {
      it('should call processImportJob successfully', function(done) {
        //uncomment below and update the code to test processImportJob
        //instance.processImportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeQuestionTag', function() {
      it('should call removeQuestionTag successfully', function(done) {
        //uncomment below and update the code to test removeQuestionTag
        //instance.removeQuestionTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTagToQuestionsBatch', function() {
      it('should call removeTagToQuestionsBatch successfully', function(done) {
        //uncomment below and update the code to test removeTagToQuestionsBatch
        //instance.removeTagToQuestionsBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchQuestionTags', function() {
      it('should call searchQuestionTags successfully', function(done) {
        //uncomment below and update the code to test searchQuestionTags
        //instance.searchQuestionTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateImportJob', function() {
      it('should call updateImportJob successfully', function(done) {
        //uncomment below and update the code to test updateImportJob
        //instance.updateImportJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQuestion', function() {
      it('should call updateQuestion successfully', function(done) {
        //uncomment below and update the code to test updateQuestion
        //instance.updateQuestion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQuestionAnswer', function() {
      it('should call updateQuestionAnswer successfully', function(done) {
        //uncomment below and update the code to test updateQuestionAnswer
        //instance.updateQuestionAnswer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQuestionTemplate', function() {
      it('should call updateQuestionTemplate successfully', function(done) {
        //uncomment below and update the code to test updateQuestionTemplate
        //instance.updateQuestionTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateQuestionsInBulk', function() {
      it('should call updateQuestionsInBulk successfully', function(done) {
        //uncomment below and update the code to test updateQuestionsInBulk
        //instance.updateQuestionsInBulk(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
