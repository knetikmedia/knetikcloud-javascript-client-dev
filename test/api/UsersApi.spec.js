/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KnetikCloud);
  }
}(this, function(expect, KnetikCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KnetikCloud.UsersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('addUserTag', function() {
      it('should call addUserTag successfully', function(done) {
        //uncomment below and update the code to test addUserTag
        //instance.addUserTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUserTemplate', function() {
      it('should call createUserTemplate successfully', function(done) {
        //uncomment below and update the code to test createUserTemplate
        //instance.createUserTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUserTemplate', function() {
      it('should call deleteUserTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteUserTemplate
        //instance.deleteUserTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDirectMessages1', function() {
      it('should call getDirectMessages1 successfully', function(done) {
        //uncomment below and update the code to test getDirectMessages1
        //instance.getDirectMessages1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUser', function() {
      it('should call getUser successfully', function(done) {
        //uncomment below and update the code to test getUser
        //instance.getUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserTags', function() {
      it('should call getUserTags successfully', function(done) {
        //uncomment below and update the code to test getUserTags
        //instance.getUserTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserTemplate', function() {
      it('should call getUserTemplate successfully', function(done) {
        //uncomment below and update the code to test getUserTemplate
        //instance.getUserTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserTemplates', function() {
      it('should call getUserTemplates successfully', function(done) {
        //uncomment below and update the code to test getUserTemplates
        //instance.getUserTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUsers', function() {
      it('should call getUsers successfully', function(done) {
        //uncomment below and update the code to test getUsers
        //instance.getUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('passwordReset', function() {
      it('should call passwordReset successfully', function(done) {
        //uncomment below and update the code to test passwordReset
        //instance.passwordReset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postUserMessage', function() {
      it('should call postUserMessage successfully', function(done) {
        //uncomment below and update the code to test postUserMessage
        //instance.postUserMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerUser', function() {
      it('should call registerUser successfully', function(done) {
        //uncomment below and update the code to test registerUser
        //instance.registerUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeUserTag', function() {
      it('should call removeUserTag successfully', function(done) {
        //uncomment below and update the code to test removeUserTag
        //instance.removeUserTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setPassword', function() {
      it('should call setPassword successfully', function(done) {
        //uncomment below and update the code to test setPassword
        //instance.setPassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startPasswordReset', function() {
      it('should call startPasswordReset successfully', function(done) {
        //uncomment below and update the code to test startPasswordReset
        //instance.startPasswordReset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('submitPasswordReset', function() {
      it('should call submitPasswordReset successfully', function(done) {
        //uncomment below and update the code to test submitPasswordReset
        //instance.submitPasswordReset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUser', function() {
      it('should call updateUser successfully', function(done) {
        //uncomment below and update the code to test updateUser
        //instance.updateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserTemplate', function() {
      it('should call updateUserTemplate successfully', function(done) {
        //uncomment below and update the code to test updateUserTemplate
        //instance.updateUserTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
