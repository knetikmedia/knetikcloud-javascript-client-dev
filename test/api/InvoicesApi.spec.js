/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KnetikCloud);
  }
}(this, function(expect, KnetikCloud) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KnetikCloud.InvoicesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InvoicesApi', function() {
    describe('createInvoice', function() {
      it('should call createInvoice successfully', function(done) {
        //uncomment below and update the code to test createInvoice
        //instance.createInvoice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFulFillmentStatuses', function() {
      it('should call getFulFillmentStatuses successfully', function(done) {
        //uncomment below and update the code to test getFulFillmentStatuses
        //instance.getFulFillmentStatuses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInvoice', function() {
      it('should call getInvoice successfully', function(done) {
        //uncomment below and update the code to test getInvoice
        //instance.getInvoice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInvoiceLogs', function() {
      it('should call getInvoiceLogs successfully', function(done) {
        //uncomment below and update the code to test getInvoiceLogs
        //instance.getInvoiceLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInvoices', function() {
      it('should call getInvoices successfully', function(done) {
        //uncomment below and update the code to test getInvoices
        //instance.getInvoices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPaymentStatuses', function() {
      it('should call getPaymentStatuses successfully', function(done) {
        //uncomment below and update the code to test getPaymentStatuses
        //instance.getPaymentStatuses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('payInvoice', function() {
      it('should call payInvoice successfully', function(done) {
        //uncomment below and update the code to test payInvoice
        //instance.payInvoice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setBundledInvoiceItemFulfillmentStatus', function() {
      it('should call setBundledInvoiceItemFulfillmentStatus successfully', function(done) {
        //uncomment below and update the code to test setBundledInvoiceItemFulfillmentStatus
        //instance.setBundledInvoiceItemFulfillmentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setExternalRef', function() {
      it('should call setExternalRef successfully', function(done) {
        //uncomment below and update the code to test setExternalRef
        //instance.setExternalRef(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setInvoiceItemFulfillmentStatus', function() {
      it('should call setInvoiceItemFulfillmentStatus successfully', function(done) {
        //uncomment below and update the code to test setInvoiceItemFulfillmentStatus
        //instance.setInvoiceItemFulfillmentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setOrderNotes', function() {
      it('should call setOrderNotes successfully', function(done) {
        //uncomment below and update the code to test setOrderNotes
        //instance.setOrderNotes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setPaymentStatus', function() {
      it('should call setPaymentStatus successfully', function(done) {
        //uncomment below and update the code to test setPaymentStatus
        //instance.setPaymentStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBillingInfo', function() {
      it('should call updateBillingInfo successfully', function(done) {
        //uncomment below and update the code to test updateBillingInfo
        //instance.updateBillingInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
