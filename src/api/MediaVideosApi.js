/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CommentResource', 'model/ContributionResource', 'model/DispositionResource', 'model/FlagResource', 'model/IntWrapper', 'model/PageResourceCommentResource', 'model/PageResourceDispositionResource', 'model/PageResourceTemplateResource', 'model/PageResourceVideoRelationshipResource', 'model/PageResourceVideoResource', 'model/Result', 'model/StringWrapper', 'model/TemplateResource', 'model/VideoRelationshipResource', 'model/VideoResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CommentResource'), require('../model/ContributionResource'), require('../model/DispositionResource'), require('../model/FlagResource'), require('../model/IntWrapper'), require('../model/PageResourceCommentResource'), require('../model/PageResourceDispositionResource'), require('../model/PageResourceTemplateResource'), require('../model/PageResourceVideoRelationshipResource'), require('../model/PageResourceVideoResource'), require('../model/Result'), require('../model/StringWrapper'), require('../model/TemplateResource'), require('../model/VideoRelationshipResource'), require('../model/VideoResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikCloud) {
      root.KnetikCloud = {};
    }
    root.KnetikCloud.MediaVideosApi = factory(root.KnetikCloud.ApiClient, root.KnetikCloud.CommentResource, root.KnetikCloud.ContributionResource, root.KnetikCloud.DispositionResource, root.KnetikCloud.FlagResource, root.KnetikCloud.IntWrapper, root.KnetikCloud.PageResourceCommentResource, root.KnetikCloud.PageResourceDispositionResource, root.KnetikCloud.PageResourceTemplateResource, root.KnetikCloud.PageResourceVideoRelationshipResource, root.KnetikCloud.PageResourceVideoResource, root.KnetikCloud.Result, root.KnetikCloud.StringWrapper, root.KnetikCloud.TemplateResource, root.KnetikCloud.VideoRelationshipResource, root.KnetikCloud.VideoResource);
  }
}(this, function(ApiClient, CommentResource, ContributionResource, DispositionResource, FlagResource, IntWrapper, PageResourceCommentResource, PageResourceDispositionResource, PageResourceTemplateResource, PageResourceVideoRelationshipResource, PageResourceVideoResource, Result, StringWrapper, TemplateResource, VideoRelationshipResource, VideoResource) {
  'use strict';

  /**
   * MediaVideos service.
   * @module api/MediaVideosApi
   * @version 3.0.11
   */

  /**
   * Constructs a new MediaVideosApi. 
   * @alias module:api/MediaVideosApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Adds a user to a video&#39;s whitelist
     * Whitelisted users can view video regardless of privacy setting. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} id The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/IntWrapper} opts.userId The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addUserToVideoWhitelistWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['userId'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addUserToVideoWhitelist");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{id}/whitelist', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a user to a video&#39;s whitelist
     * Whitelisted users can view video regardless of privacy setting. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} id The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/IntWrapper} opts.userId The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addUserToVideoWhitelist = function(id, opts) {
      return this.addUserToVideoWhitelistWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds a new video in the system
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoResource} opts.videoResource The video object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VideoResource} and HTTP response
     */
    this.addVideoWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['videoResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VideoResource;

      return this.apiClient.callApi(
        '/media/videos', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a new video in the system
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoResource} opts.videoResource The video object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VideoResource}
     */
    this.addVideo = function(opts) {
      return this.addVideoWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new video comment
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentResource} opts.commentResource The comment object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommentResource} and HTTP response
     */
    this.addVideoCommentWithHttpInfo = function(videoId, opts) {
      opts = opts || {};
      var postBody = opts['commentResource'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoComment");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CommentResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new video comment
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CommentResource} opts.commentResource The comment object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommentResource}
     */
    this.addVideoComment = function(videoId, opts) {
      return this.addVideoCommentWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds a contributor to a video
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/ContributionResource} opts.contributionResource The contribution object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addVideoContributorWithHttpInfo = function(videoId, opts) {
      opts = opts || {};
      var postBody = opts['contributionResource'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoContributor");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/contributors', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a contributor to a video
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/ContributionResource} opts.contributionResource The contribution object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addVideoContributor = function(videoId, opts) {
      return this.addVideoContributorWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new flag
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.reason The flag reason
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FlagResource} and HTTP response
     */
    this.addVideoFlagWithHttpInfo = function(videoId, opts) {
      opts = opts || {};
      var postBody = opts['reason'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoFlag");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FlagResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/moderation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new flag
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.reason The flag reason
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FlagResource}
     */
    this.addVideoFlag = function(videoId, opts) {
      return this.addVideoFlagWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds one or more existing videos as related to this one
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoRelationshipResource} opts.videoRelationshipResource The video relationship object 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VideoRelationshipResource} and HTTP response
     */
    this.addVideoRelationshipsWithHttpInfo = function(videoId, opts) {
      opts = opts || {};
      var postBody = opts['videoRelationshipResource'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoRelationships");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VideoRelationshipResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/related', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds one or more existing videos as related to this one
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoRelationshipResource} opts.videoRelationshipResource The video relationship object 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VideoRelationshipResource}
     */
    this.addVideoRelationships = function(videoId, opts) {
      return this.addVideoRelationshipsWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a video disposition
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/DispositionResource} opts.dispositionResource The disposition object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DispositionResource} and HTTP response
     */
    this.createVideoDispositionWithHttpInfo = function(videoId, opts) {
      opts = opts || {};
      var postBody = opts['dispositionResource'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling createVideoDisposition");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DispositionResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/dispositions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a video disposition
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/DispositionResource} opts.dispositionResource The disposition object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DispositionResource}
     */
    this.createVideoDisposition = function(videoId, opts) {
      return this.createVideoDispositionWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a video template
     * Video Templates define a type of video and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.videoTemplateResource The video template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    this.createVideoTemplateWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['videoTemplateResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/media/videos/templates', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a video template
     * Video Templates define a type of video and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.videoTemplateResource The video template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    this.createVideoTemplate = function(opts) {
      return this.createVideoTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a video from the system if no resources are attached to it
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} id The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteVideoWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVideo");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a video from the system if no resources are attached to it
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} id The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteVideo = function(id) {
      return this.deleteVideoWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a video comment
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} id The comment id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteVideoCommentWithHttpInfo = function(videoId, id) {
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoComment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVideoComment");
      }


      var pathParams = {
        'video_id': videoId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/comments/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a video comment
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} id The comment id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteVideoComment = function(videoId, id) {
      return this.deleteVideoCommentWithHttpInfo(videoId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a video disposition
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} dispositionId The disposition id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteVideoDispositionWithHttpInfo = function(videoId, dispositionId) {
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoDisposition");
      }

      // verify the required parameter 'dispositionId' is set
      if (dispositionId === undefined || dispositionId === null) {
        throw new Error("Missing the required parameter 'dispositionId' when calling deleteVideoDisposition");
      }


      var pathParams = {
        'video_id': videoId,
        'disposition_id': dispositionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/dispositions/{disposition_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a video disposition
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} dispositionId The disposition id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteVideoDisposition = function(videoId, dispositionId) {
      return this.deleteVideoDispositionWithHttpInfo(videoId, dispositionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a flag
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteVideoFlagWithHttpInfo = function(videoId) {
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoFlag");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/moderation', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a flag
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteVideoFlag = function(videoId) {
      return this.deleteVideoFlagWithHttpInfo(videoId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a video&#39;s relationship
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} id The relationship id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteVideoRelationshipWithHttpInfo = function(videoId, id) {
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling deleteVideoRelationship");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVideoRelationship");
      }


      var pathParams = {
        'video_id': videoId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/related/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a video&#39;s relationship
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} id The relationship id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteVideoRelationship = function(videoId, id) {
      return this.deleteVideoRelationshipWithHttpInfo(videoId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a video template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteVideoTemplateWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVideoTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'cascade': opts['cascade'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/templates/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a video template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteVideoTemplate = function(id, opts) {
      return this.deleteVideoTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get user videos
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} userId The user id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.excludeFlagged Skip videos that have been flagged by the current user (default to true)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceVideoResource} and HTTP response
     */
    this.getUserVideosWithHttpInfo = function(userId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserVideos");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'exclude_flagged': opts['excludeFlagged'],
        'size': opts['size'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceVideoResource;

      return this.apiClient.callApi(
        '/users/{user_id}/videos', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get user videos
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} userId The user id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.excludeFlagged Skip videos that have been flagged by the current user (default to true)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceVideoResource}
     */
    this.getUserVideos = function(userId, opts) {
      return this.getUserVideosWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Loads a specific video details
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} id The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VideoResource} and HTTP response
     */
    this.getVideoWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVideo");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VideoResource;

      return this.apiClient.callApi(
        '/media/videos/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Loads a specific video details
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} id The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VideoResource}
     */
    this.getVideo = function(id) {
      return this.getVideoWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a page of comments for a video
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceCommentResource} and HTTP response
     */
    this.getVideoCommentsWithHttpInfo = function(videoId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoComments");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceCommentResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a page of comments for a video
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceCommentResource}
     */
    this.getVideoComments = function(videoId, opts) {
      return this.getVideoCommentsWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a page of dispositions for a video
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterCreatedDate Filters invoices by creation date. Multiple values possible for range search. Format: filter_created_date&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ) and ts is a unix timestamp in seconds. Ex: filter_created_date&#x3D;GT,1452154258,LT,1554254874
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceDispositionResource} and HTTP response
     */
    this.getVideoDispositionsWithHttpInfo = function(videoId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoDispositions");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
        'filter_created_date': opts['filterCreatedDate'],
        'size': opts['size'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceDispositionResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/dispositions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a page of dispositions for a video
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterCreatedDate Filters invoices by creation date. Multiple values possible for range search. Format: filter_created_date&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ) and ts is a unix timestamp in seconds. Ex: filter_created_date&#x3D;GT,1452154258,LT,1554254874
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceDispositionResource}
     */
    this.getVideoDispositions = function(videoId, opts) {
      return this.getVideoDispositionsWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a page of video relationships
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceVideoRelationshipResource} and HTTP response
     */
    this.getVideoRelationshipsWithHttpInfo = function(videoId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoRelationships");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceVideoRelationshipResource;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/related', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a page of video relationships
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Number} videoId The video id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceVideoRelationshipResource}
     */
    this.getVideoRelationships = function(videoId, opts) {
      return this.getVideoRelationshipsWithHttpInfo(videoId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single video template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or VIDEOS_ADMIN
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    this.getVideoTemplateWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVideoTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/media/videos/templates/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single video template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or VIDEOS_ADMIN
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    this.getVideoTemplate = function(id) {
      return this.getVideoTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search video templates
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or VIDEOS_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceTemplateResource} and HTTP response
     */
    this.getVideoTemplatesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceTemplateResource;

      return this.apiClient.callApi(
        '/media/videos/templates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search video templates
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or VIDEOS_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceTemplateResource}
     */
    this.getVideoTemplates = function(opts) {
      return this.getVideoTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search videos using the documented filters
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.excludeFlagged Skip videos that have been flagged by the current user (default to true)
     * @param {Number} opts.filterVideosByUploader Filter for videos by uploader id
     * @param {String} opts.filterCategory Filter for videos from a specific category by id
     * @param {String} opts.filterTagset Filter for videos with specified tags (separated by comma)
     * @param {String} opts.filterVideosByName Filter for videos which name *STARTS* with the given string
     * @param {Number} opts.filterVideosByContributor Filter for videos with contribution from the artist specified by ID
     * @param {Number} opts.filterVideosByAuthor Filter for videos with an artist as author specified by ID
     * @param {Boolean} opts.filterHasAuthor Filter for videos that have an author set if true, or that have no author if false
     * @param {Boolean} opts.filterHasUploader Filter for videos that have an uploader set if true, or that have no uploader if false
     * @param {String} opts.filterRelatedTo Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well
     * @param {Boolean} opts.filterFriends Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission)
     * @param {String} opts.filterDisposition Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to author:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceVideoResource} and HTTP response
     */
    this.getVideosWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'exclude_flagged': opts['excludeFlagged'],
        'filter_videos_by_uploader': opts['filterVideosByUploader'],
        'filter_category': opts['filterCategory'],
        'filter_tagset': opts['filterTagset'],
        'filter_videos_by_name': opts['filterVideosByName'],
        'filter_videos_by_contributor': opts['filterVideosByContributor'],
        'filter_videos_by_author': opts['filterVideosByAuthor'],
        'filter_has_author': opts['filterHasAuthor'],
        'filter_has_uploader': opts['filterHasUploader'],
        'filter_related_to': opts['filterRelatedTo'],
        'filter_friends': opts['filterFriends'],
        'filter_disposition': opts['filterDisposition'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceVideoResource;

      return this.apiClient.callApi(
        '/media/videos', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Search videos using the documented filters
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.excludeFlagged Skip videos that have been flagged by the current user (default to true)
     * @param {Number} opts.filterVideosByUploader Filter for videos by uploader id
     * @param {String} opts.filterCategory Filter for videos from a specific category by id
     * @param {String} opts.filterTagset Filter for videos with specified tags (separated by comma)
     * @param {String} opts.filterVideosByName Filter for videos which name *STARTS* with the given string
     * @param {Number} opts.filterVideosByContributor Filter for videos with contribution from the artist specified by ID
     * @param {Number} opts.filterVideosByAuthor Filter for videos with an artist as author specified by ID
     * @param {Boolean} opts.filterHasAuthor Filter for videos that have an author set if true, or that have no author if false
     * @param {Boolean} opts.filterHasUploader Filter for videos that have an uploader set if true, or that have no uploader if false
     * @param {String} opts.filterRelatedTo Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well
     * @param {Boolean} opts.filterFriends Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission)
     * @param {String} opts.filterDisposition Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to author:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceVideoResource}
     */
    this.getVideos = function(opts) {
      return this.getVideosWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a user from a video&#39;s whitelist
     * Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeUserFromVideoWhitelistWithHttpInfo = function(videoId, id) {
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling removeUserFromVideoWhitelist");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeUserFromVideoWhitelist");
      }


      var pathParams = {
        'video_id': videoId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/whitelist/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a user from a video&#39;s whitelist
     * Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} id The user id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeUserFromVideoWhitelist = function(videoId, id) {
      return this.removeUserFromVideoWhitelistWithHttpInfo(videoId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a contributor from a video
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} id The contributor id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeVideoContributorWithHttpInfo = function(videoId, id) {
      var postBody = null;

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling removeVideoContributor");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeVideoContributor");
      }


      var pathParams = {
        'video_id': videoId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/contributors/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a contributor from a video
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} id The contributor id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeVideoContributor = function(videoId, id) {
      return this.removeVideoContributorWithHttpInfo(videoId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modifies a video&#39;s details
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} id The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoResource} opts.videoResource The video object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateVideoWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['videoResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVideo");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Modifies a video&#39;s details
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} id The video id
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoResource} opts.videoResource The video object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateVideo = function(id, opts) {
      return this.updateVideoWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a video comment
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} id The comment id
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.content The comment content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateVideoCommentWithHttpInfo = function(videoId, id, opts) {
      opts = opts || {};
      var postBody = opts['content'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling updateVideoComment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVideoComment");
      }


      var pathParams = {
        'video_id': videoId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/comments/{id}/content', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a video comment
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} id The comment id
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.content The comment content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateVideoComment = function(videoId, id, opts) {
      return this.updateVideoCommentWithHttpInfo(videoId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a video&#39;s relationship details
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} relationshipId The relationship id
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.details The video relationship details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateVideoRelationshipWithHttpInfo = function(videoId, relationshipId, opts) {
      opts = opts || {};
      var postBody = opts['details'];

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling updateVideoRelationship");
      }

      // verify the required parameter 'relationshipId' is set
      if (relationshipId === undefined || relationshipId === null) {
        throw new Error("Missing the required parameter 'relationshipId' when calling updateVideoRelationship");
      }


      var pathParams = {
        'video_id': videoId,
        'relationship_id': relationshipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{video_id}/related/{id}/relationship_details', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a video&#39;s relationship details
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; VIDEOS_USER or VIDEOS_ADMIN
     * @param {Number} videoId The video id
     * @param {Number} relationshipId The relationship id
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.details The video relationship details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateVideoRelationship = function(videoId, relationshipId, opts) {
      return this.updateVideoRelationshipWithHttpInfo(videoId, relationshipId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a video template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.videoTemplateResource The video template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    this.updateVideoTemplateWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['videoTemplateResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVideoTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/media/videos/templates/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a video template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.videoTemplateResource The video template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    this.updateVideoTemplate = function(id, opts) {
      return this.updateVideoTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Increment a video&#39;s view count
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Number} id The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.viewVideoWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling viewVideo");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/media/videos/{id}/views', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Increment a video&#39;s view count
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Number} id The video id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.viewVideo = function(id) {
      return this.viewVideoWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
