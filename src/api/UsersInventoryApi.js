/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EntitlementGrantRequest', 'model/EntitlementItem', 'model/InventoryStatusWrapper', 'model/InvoiceResource', 'model/ItemTemplateResource', 'model/PageResourceEntitlementItem', 'model/PageResourceItemTemplateResource', 'model/PageResourceUserInventoryResource', 'model/PageResourceUserItemLogResource', 'model/Result', 'model/UserInventoryAddRequest', 'model/UserInventoryResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EntitlementGrantRequest'), require('../model/EntitlementItem'), require('../model/InventoryStatusWrapper'), require('../model/InvoiceResource'), require('../model/ItemTemplateResource'), require('../model/PageResourceEntitlementItem'), require('../model/PageResourceItemTemplateResource'), require('../model/PageResourceUserInventoryResource'), require('../model/PageResourceUserItemLogResource'), require('../model/Result'), require('../model/UserInventoryAddRequest'), require('../model/UserInventoryResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikCloud) {
      root.KnetikCloud = {};
    }
    root.KnetikCloud.UsersInventoryApi = factory(root.KnetikCloud.ApiClient, root.KnetikCloud.EntitlementGrantRequest, root.KnetikCloud.EntitlementItem, root.KnetikCloud.InventoryStatusWrapper, root.KnetikCloud.InvoiceResource, root.KnetikCloud.ItemTemplateResource, root.KnetikCloud.PageResourceEntitlementItem, root.KnetikCloud.PageResourceItemTemplateResource, root.KnetikCloud.PageResourceUserInventoryResource, root.KnetikCloud.PageResourceUserItemLogResource, root.KnetikCloud.Result, root.KnetikCloud.UserInventoryAddRequest, root.KnetikCloud.UserInventoryResource);
  }
}(this, function(ApiClient, EntitlementGrantRequest, EntitlementItem, InventoryStatusWrapper, InvoiceResource, ItemTemplateResource, PageResourceEntitlementItem, PageResourceItemTemplateResource, PageResourceUserInventoryResource, PageResourceUserItemLogResource, Result, UserInventoryAddRequest, UserInventoryResource) {
  'use strict';

  /**
   * UsersInventory service.
   * @module api/UsersInventoryApi
   * @version 3.0.11
   */

  /**
   * Constructs a new UsersInventoryApi. 
   * @alias module:api/UsersInventoryApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Adds an item to the user inventory
     * The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} id The id of the user
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInventoryAddRequest} opts.userInventoryAddRequest The user inventory add request object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InvoiceResource} and HTTP response
     */
    this.addItemToUserInventoryWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['userInventoryAddRequest'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addItemToUserInventory");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InvoiceResource;

      return this.apiClient.callApi(
        '/users/{id}/inventory', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds an item to the user inventory
     * The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} id The id of the user
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInventoryAddRequest} opts.userInventoryAddRequest The user inventory add request object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InvoiceResource}
     */
    this.addItemToUserInventory = function(id, opts) {
      return this.addItemToUserInventoryWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Check for access to an item without consuming
     * Useful for pre-check and accounts for all various buisness rules. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN or owner
     * @param {String} userId The id of the user to check for or &#39;me&#39; for logged in user
     * @param {Number} itemId The id of the item
     * @param {Object} opts Optional parameters
     * @param {String} opts.sku The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.checkUserEntitlementItemWithHttpInfo = function(userId, itemId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling checkUserEntitlementItem");
      }

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling checkUserEntitlementItem");
      }


      var pathParams = {
        'user_id': userId,
        'item_id': itemId
      };
      var queryParams = {
        'sku': opts['sku'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/entitlements/{item_id}/check', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Check for access to an item without consuming
     * Useful for pre-check and accounts for all various buisness rules. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN or owner
     * @param {String} userId The id of the user to check for or &#39;me&#39; for logged in user
     * @param {Number} itemId The id of the item
     * @param {Object} opts Optional parameters
     * @param {String} opts.sku The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.checkUserEntitlementItem = function(userId, itemId, opts) {
      return this.checkUserEntitlementItemWithHttpInfo(userId, itemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an entitlement item
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/EntitlementItem} opts.entitlementItem The entitlement item object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntitlementItem} and HTTP response
     */
    this.createEntitlementItemWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['entitlementItem'];


      var pathParams = {
      };
      var queryParams = {
        'cascade': opts['cascade'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EntitlementItem;

      return this.apiClient.callApi(
        '/entitlements', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an entitlement item
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/EntitlementItem} opts.entitlementItem The entitlement item object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntitlementItem}
     */
    this.createEntitlementItem = function(opts) {
      return this.createEntitlementItemWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an entitlement template
     * Entitlement templates define a type of entitlement and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/ItemTemplateResource} opts.template The entitlement template to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemTemplateResource} and HTTP response
     */
    this.createEntitlementTemplateWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['template'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ItemTemplateResource;

      return this.apiClient.callApi(
        '/entitlements/templates', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an entitlement template
     * Entitlement templates define a type of entitlement and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/ItemTemplateResource} opts.template The entitlement template to be created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemTemplateResource}
     */
    this.createEntitlementTemplate = function(opts) {
      return this.createEntitlementTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an entitlement item
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} entitlementId The id of the entitlement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteEntitlementItemWithHttpInfo = function(entitlementId) {
      var postBody = null;

      // verify the required parameter 'entitlementId' is set
      if (entitlementId === undefined || entitlementId === null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling deleteEntitlementItem");
      }


      var pathParams = {
        'entitlement_id': entitlementId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/entitlements/{entitlement_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an entitlement item
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} entitlementId The id of the entitlement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteEntitlementItem = function(entitlementId) {
      return this.deleteEntitlementItemWithHttpInfo(entitlementId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an entitlement template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteEntitlementTemplateWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEntitlementTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'cascade': opts['cascade'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/entitlements/templates/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an entitlement template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteEntitlementTemplate = function(id, opts) {
      return this.deleteEntitlementTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single entitlement item
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Number} entitlementId The id of the entitlement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntitlementItem} and HTTP response
     */
    this.getEntitlementItemWithHttpInfo = function(entitlementId) {
      var postBody = null;

      // verify the required parameter 'entitlementId' is set
      if (entitlementId === undefined || entitlementId === null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling getEntitlementItem");
      }


      var pathParams = {
        'entitlement_id': entitlementId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EntitlementItem;

      return this.apiClient.callApi(
        '/entitlements/{entitlement_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single entitlement item
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Number} entitlementId The id of the entitlement
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntitlementItem}
     */
    this.getEntitlementItem = function(entitlementId) {
      return this.getEntitlementItemWithHttpInfo(entitlementId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search entitlement items
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterTemplate Filter for entitlements using a specified template
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceEntitlementItem} and HTTP response
     */
    this.getEntitlementItemsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_template': opts['filterTemplate'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceEntitlementItem;

      return this.apiClient.callApi(
        '/entitlements', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search entitlement items
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterTemplate Filter for entitlements using a specified template
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceEntitlementItem}
     */
    this.getEntitlementItems = function(opts) {
      return this.getEntitlementItemsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single entitlement template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ACHIEVEMENTS_ADMIN
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemTemplateResource} and HTTP response
     */
    this.getEntitlementTemplateWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEntitlementTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ItemTemplateResource;

      return this.apiClient.callApi(
        '/entitlements/templates/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single entitlement template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ACHIEVEMENTS_ADMIN
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemTemplateResource}
     */
    this.getEntitlementTemplate = function(id) {
      return this.getEntitlementTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search entitlement templates
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ACHIEVEMENTS_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceItemTemplateResource} and HTTP response
     */
    this.getEntitlementTemplatesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceItemTemplateResource;

      return this.apiClient.callApi(
        '/entitlements/templates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search entitlement templates
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ACHIEVEMENTS_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceItemTemplateResource}
     */
    this.getEntitlementTemplates = function(opts) {
      return this.getEntitlementTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the user inventory entries for a given user
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN or owner
     * @param {Number} id The id of the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive If true, accepts inactive user inventories (default to false)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.filterItemName Filter by items whose name starts with a string
     * @param {Number} opts.filterItemId Filter by item id
     * @param {String} opts.filterUsername Filter by entries owned by the user with the specified username
     * @param {String} opts.filterGroup Filter by entries owned by the users in a given group, by unique name
     * @param {String} opts.filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceUserInventoryResource} and HTTP response
     */
    this.getUserInventoriesWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserInventories");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'inactive': opts['inactive'],
        'size': opts['size'],
        'page': opts['page'],
        'filter_item_name': opts['filterItemName'],
        'filter_item_id': opts['filterItemId'],
        'filter_username': opts['filterUsername'],
        'filter_group': opts['filterGroup'],
        'filter_date': opts['filterDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceUserInventoryResource;

      return this.apiClient.callApi(
        '/users/{id}/inventory', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the user inventory entries for a given user
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN or owner
     * @param {Number} id The id of the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive If true, accepts inactive user inventories (default to false)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.filterItemName Filter by items whose name starts with a string
     * @param {Number} opts.filterItemId Filter by item id
     * @param {String} opts.filterUsername Filter by entries owned by the user with the specified username
     * @param {String} opts.filterGroup Filter by entries owned by the users in a given group, by unique name
     * @param {String} opts.filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceUserInventoryResource}
     */
    this.getUserInventories = function(id, opts) {
      return this.getUserInventoriesWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an inventory entry
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {String} userId The id of the inventory owner or &#39;me&#39; for the logged in user
     * @param {Number} id The id of the user inventory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserInventoryResource} and HTTP response
     */
    this.getUserInventoryWithHttpInfo = function(userId, id) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserInventory");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserInventory");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserInventoryResource;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an inventory entry
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {String} userId The id of the inventory owner or &#39;me&#39; for the logged in user
     * @param {Number} id The id of the user inventory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserInventoryResource}
     */
    this.getUserInventory = function(userId, id) {
      return this.getUserInventoryWithHttpInfo(userId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the log entries for this inventory entry
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN or owner
     * @param {String} userId The id of the inventory owner or &#39;me&#39; for the logged in user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceUserItemLogResource} and HTTP response
     */
    this.getUserInventoryLogWithHttpInfo = function(userId, id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserInventoryLog");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserInventoryLog");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceUserItemLogResource;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/log', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the log entries for this inventory entry
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN or owner
     * @param {String} userId The id of the inventory owner or &#39;me&#39; for the logged in user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceUserItemLogResource}
     */
    this.getUserInventoryLog = function(userId, id, opts) {
      return this.getUserInventoryLogWithHttpInfo(userId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the user inventory entries for all users
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive If true, accepts inactive user inventories (default to false)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.filterItemName Filter by items whose name starts with a string
     * @param {Number} opts.filterItemId Filter by item id
     * @param {String} opts.filterUsername Filter by entries owned by the user with the specified username
     * @param {String} opts.filterGroup Filter by entries owned by the users in a given group, by unique name
     * @param {String} opts.filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceUserInventoryResource} and HTTP response
     */
    this.getUsersInventoryWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'inactive': opts['inactive'],
        'size': opts['size'],
        'page': opts['page'],
        'filter_item_name': opts['filterItemName'],
        'filter_item_id': opts['filterItemId'],
        'filter_username': opts['filterUsername'],
        'filter_group': opts['filterGroup'],
        'filter_date': opts['filterDate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceUserInventoryResource;

      return this.apiClient.callApi(
        '/inventories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the user inventory entries for all users
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive If true, accepts inactive user inventories (default to false)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.filterItemName Filter by items whose name starts with a string
     * @param {Number} opts.filterItemId Filter by item id
     * @param {String} opts.filterUsername Filter by entries owned by the user with the specified username
     * @param {String} opts.filterGroup Filter by entries owned by the users in a given group, by unique name
     * @param {String} opts.filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceUserInventoryResource}
     */
    this.getUsersInventory = function(opts) {
      return this.getUsersInventoryWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Grant an entitlement
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} userId The id of the user to grant the entitlement to
     * @param {module:model/EntitlementGrantRequest} grantRequest grantRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.grantUserEntitlementWithHttpInfo = function(userId, grantRequest) {
      var postBody = grantRequest;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling grantUserEntitlement");
      }

      // verify the required parameter 'grantRequest' is set
      if (grantRequest === undefined || grantRequest === null) {
        throw new Error("Missing the required parameter 'grantRequest' when calling grantUserEntitlement");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/entitlements', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Grant an entitlement
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} userId The id of the user to grant the entitlement to
     * @param {module:model/EntitlementGrantRequest} grantRequest grantRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.grantUserEntitlement = function(userId, grantRequest) {
      return this.grantUserEntitlementWithHttpInfo(userId, grantRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an entitlement item
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} entitlementId The id of the entitlement
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/EntitlementItem} opts.entitlementItem The entitlement item object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateEntitlementItemWithHttpInfo = function(entitlementId, opts) {
      opts = opts || {};
      var postBody = opts['entitlementItem'];

      // verify the required parameter 'entitlementId' is set
      if (entitlementId === undefined || entitlementId === null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling updateEntitlementItem");
      }


      var pathParams = {
        'entitlement_id': entitlementId
      };
      var queryParams = {
        'cascade': opts['cascade'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/entitlements/{entitlement_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an entitlement item
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} entitlementId The id of the entitlement
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/EntitlementItem} opts.entitlementItem The entitlement item object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateEntitlementItem = function(entitlementId, opts) {
      return this.updateEntitlementItemWithHttpInfo(entitlementId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an entitlement template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/ItemTemplateResource} opts.template The updated template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ItemTemplateResource} and HTTP response
     */
    this.updateEntitlementTemplateWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['template'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateEntitlementTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ItemTemplateResource;

      return this.apiClient.callApi(
        '/entitlements/templates/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an entitlement template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/ItemTemplateResource} opts.template The updated template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ItemTemplateResource}
     */
    this.updateEntitlementTemplate = function(id, opts) {
      return this.updateEntitlementTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set the behavior data for an inventory entry
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} userId The id of the user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Object} opts.data The data map
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateUserInventoryBehaviorDataWithHttpInfo = function(userId, id, opts) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserInventoryBehaviorData");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserInventoryBehaviorData");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/behavior-data', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set the behavior data for an inventory entry
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} userId The id of the user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Object} opts.data The data map
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateUserInventoryBehaviorData = function(userId, id, opts) {
      return this.updateUserInventoryBehaviorDataWithHttpInfo(userId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set the expiration date
     * Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill). &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} userId user_id
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.timestamp The new expiration date as a unix timestamp in seconds. May be null (no body).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateUserInventoryExpiresWithHttpInfo = function(userId, id, opts) {
      opts = opts || {};
      var postBody = opts['timestamp'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserInventoryExpires");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserInventoryExpires");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/expires', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set the expiration date
     * Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill). &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} userId user_id
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.timestamp The new expiration date as a unix timestamp in seconds. May be null (no body).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateUserInventoryExpires = function(userId, id, opts) {
      return this.updateUserInventoryExpiresWithHttpInfo(userId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set the status for an inventory entry
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} userId The id of the user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {module:model/InventoryStatusWrapper} opts.inventoryStatus The inventory status object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateUserInventoryStatusWithHttpInfo = function(userId, id, opts) {
      opts = opts || {};
      var postBody = opts['inventoryStatus'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserInventoryStatus");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserInventoryStatus");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Set the status for an inventory entry
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
     * @param {Number} userId The id of the user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {module:model/InventoryStatusWrapper} opts.inventoryStatus The inventory status object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateUserInventoryStatus = function(userId, id, opts) {
      return this.updateUserInventoryStatusWithHttpInfo(userId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Use an item
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN or owner
     * @param {String} userId The id of the user to check for or &#39;me&#39; for logged in user
     * @param {Number} itemId The id of the item
     * @param {Object} opts Optional parameters
     * @param {String} opts.sku The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out
     * @param {String} opts.info Any additional info to add to the log about this use
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.useUserEntitlementItemWithHttpInfo = function(userId, itemId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling useUserEntitlementItem");
      }

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling useUserEntitlementItem");
      }


      var pathParams = {
        'user_id': userId,
        'item_id': itemId
      };
      var queryParams = {
        'sku': opts['sku'],
        'info': opts['info'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/entitlements/{item_id}/use', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Use an item
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN or owner
     * @param {String} userId The id of the user to check for or &#39;me&#39; for logged in user
     * @param {Number} itemId The id of the item
     * @param {Object} opts Optional parameters
     * @param {String} opts.sku The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out
     * @param {String} opts.info Any additional info to add to the log about this use
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.useUserEntitlementItem = function(userId, itemId, opts) {
      return this.useUserEntitlementItemWithHttpInfo(userId, itemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
