/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AnswerResource', 'model/DeltaResource', 'model/ImportJobResource', 'model/PageResourceImportJobResource', 'model/PageResourceQuestionResource', 'model/PageResourceQuestionTemplateResource', 'model/QuestionResource', 'model/QuestionTemplateResource', 'model/Result', 'model/StringWrapper'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AnswerResource'), require('../model/DeltaResource'), require('../model/ImportJobResource'), require('../model/PageResourceImportJobResource'), require('../model/PageResourceQuestionResource'), require('../model/PageResourceQuestionTemplateResource'), require('../model/QuestionResource'), require('../model/QuestionTemplateResource'), require('../model/Result'), require('../model/StringWrapper'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikCloud) {
      root.KnetikCloud = {};
    }
    root.KnetikCloud.GamificationTriviaApi = factory(root.KnetikCloud.ApiClient, root.KnetikCloud.AnswerResource, root.KnetikCloud.DeltaResource, root.KnetikCloud.ImportJobResource, root.KnetikCloud.PageResourceImportJobResource, root.KnetikCloud.PageResourceQuestionResource, root.KnetikCloud.PageResourceQuestionTemplateResource, root.KnetikCloud.QuestionResource, root.KnetikCloud.QuestionTemplateResource, root.KnetikCloud.Result, root.KnetikCloud.StringWrapper);
  }
}(this, function(ApiClient, AnswerResource, DeltaResource, ImportJobResource, PageResourceImportJobResource, PageResourceQuestionResource, PageResourceQuestionTemplateResource, QuestionResource, QuestionTemplateResource, Result, StringWrapper) {
  'use strict';

  /**
   * GamificationTrivia service.
   * @module api/GamificationTriviaApi
   * @version 3.0.11
   */

  /**
   * Constructs a new GamificationTriviaApi. 
   * @alias module:api/GamificationTriviaApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add an answer to a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} questionId The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/AnswerResource} opts.answer The new answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AnswerResource} and HTTP response
     */
    this.addQuestionAnswersWithHttpInfo = function(questionId, opts) {
      opts = opts || {};
      var postBody = opts['answer'];

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling addQuestionAnswers");
      }


      var pathParams = {
        'question_id': questionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AnswerResource;

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add an answer to a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} questionId The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/AnswerResource} opts.answer The new answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AnswerResource}
     */
    this.addQuestionAnswers = function(questionId, opts) {
      return this.addQuestionAnswersWithHttpInfo(questionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a tag to a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} id The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.tag The new tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.addQuestionTagWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['tag'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addQuestionTag");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{id}/tags', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a tag to a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} id The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.tag The new tag
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.addQuestionTag = function(id, opts) {
      return this.addQuestionTagWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a tag to a batch of questions
     * All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.tag The tag to add
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {module:model/String} opts.filterType Filter for questions with specified type
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    this.addTagToQuestionsBatchWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['tag'];


      var pathParams = {
      };
      var queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tag': opts['filterTag'],
        'filter_tagset': opts['filterTagset'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished'],
        'filter_import_id': opts['filterImportId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/trivia/questions/tags', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a tag to a batch of questions
     * All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/StringWrapper} opts.tag The tag to add
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {module:model/String} opts.filterType Filter for questions with specified type
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    this.addTagToQuestionsBatch = function(opts) {
      return this.addTagToQuestionsBatchWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an import job
     * Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/ImportJobResource} opts.request The new import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImportJobResource} and HTTP response
     */
    this.createImportJobWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['request'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an import job
     * Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/ImportJobResource} opts.request The new import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImportJobResource}
     */
    this.createImportJob = function(opts) {
      return this.createImportJobWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question The new question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuestionResource} and HTTP response
     */
    this.createQuestionWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['question'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuestionResource;

      return this.apiClient.callApi(
        '/trivia/questions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question The new question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuestionResource}
     */
    this.createQuestion = function(opts) {
      return this.createQuestionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a question template
     * Question templates define a type of question and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionTemplateResource} opts.questionTemplateResource The question template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuestionTemplateResource} and HTTP response
     */
    this.createQuestionTemplateWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['questionTemplateResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuestionTemplateResource;

      return this.apiClient.callApi(
        '/trivia/questions/templates', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a question template
     * Question templates define a type of question and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionTemplateResource} opts.questionTemplateResource The question template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuestionTemplateResource}
     */
    this.createQuestionTemplate = function(opts) {
      return this.createQuestionTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an import job
     * Also deletes all questions that were imported by it. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Number} id The id of the job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteImportJobWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteImportJob");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/import/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an import job
     * Also deletes all questions that were imported by it. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Number} id The id of the job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteImportJob = function(id) {
      return this.deleteImportJobWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} id The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteQuestionWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteQuestion");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} id The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteQuestion = function(id) {
      return this.deleteQuestionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove an answer from a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteQuestionAnswersWithHttpInfo = function(questionId, id) {
      var postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling deleteQuestionAnswers");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteQuestionAnswers");
      }


      var pathParams = {
        'question_id': questionId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove an answer from a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteQuestionAnswers = function(questionId, id) {
      return this.deleteQuestionAnswersWithHttpInfo(questionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a question template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteQuestionTemplateWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteQuestionTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'cascade': opts['cascade'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/templates/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a question template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteQuestionTemplate = function(id, opts) {
      return this.deleteQuestionTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an import job
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Number} id The id of the job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImportJobResource} and HTTP response
     */
    this.getImportJobWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImportJob");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an import job
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Number} id The id of the job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImportJobResource}
     */
    this.getImportJob = function(id) {
      return this.getImportJobWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of import job
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterVendor Filter for jobs by vendor id
     * @param {String} opts.filterCategory Filter for jobs by category id
     * @param {String} opts.filterName Filter for jobs which name *STARTS* with the given string
     * @param {String} opts.filterStatus Filter for jobs that are in a specific set of statuses (comma separated)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceImportJobResource} and HTTP response
     */
    this.getImportJobsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_vendor': opts['filterVendor'],
        'filter_category': opts['filterCategory'],
        'filter_name': opts['filterName'],
        'filter_status': opts['filterStatus'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of import job
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterVendor Filter for jobs by vendor id
     * @param {String} opts.filterCategory Filter for jobs by category id
     * @param {String} opts.filterName Filter for jobs which name *STARTS* with the given string
     * @param {String} opts.filterStatus Filter for jobs that are in a specific set of statuses (comma separated)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceImportJobResource}
     */
    this.getImportJobs = function(opts) {
      return this.getImportJobsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} id The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuestionResource} and HTTP response
     */
    this.getQuestionWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuestion");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = QuestionResource;

      return this.apiClient.callApi(
        '/trivia/questions/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} id The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuestionResource}
     */
    this.getQuestion = function(id) {
      return this.getQuestionWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an answer for a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AnswerResource} and HTTP response
     */
    this.getQuestionAnswerWithHttpInfo = function(questionId, id) {
      var postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling getQuestionAnswer");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuestionAnswer");
      }


      var pathParams = {
        'question_id': questionId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AnswerResource;

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get an answer for a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AnswerResource}
     */
    this.getQuestionAnswer = function(questionId, id) {
      return this.getQuestionAnswerWithHttpInfo(questionId, id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the answers available for a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} questionId The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AnswerResource>} and HTTP response
     */
    this.getQuestionAnswersWithHttpInfo = function(questionId) {
      var postBody = null;

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling getQuestionAnswers");
      }


      var pathParams = {
        'question_id': questionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [AnswerResource];

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the answers available for a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} questionId The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AnswerResource>}
     */
    this.getQuestionAnswers = function(questionId) {
      return this.getQuestionAnswersWithHttpInfo(questionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List question deltas in ascending order of updated date
     * The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.since Timestamp in seconds
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/DeltaResource>} and HTTP response
     */
    this.getQuestionDeltasWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'since': opts['since'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DeltaResource];

      return this.apiClient.callApi(
        '/trivia/questions/delta', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List question deltas in ascending order of updated date
     * The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.since Timestamp in seconds
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/DeltaResource>}
     */
    this.getQuestionDeltas = function(opts) {
      return this.getQuestionDeltasWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the tags for a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} id The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */
    this.getQuestionTagsWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuestionTags");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/trivia/questions/{id}/tags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the tags for a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} id The id of the question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */
    this.getQuestionTags = function(id) {
      return this.getQuestionTagsWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single question template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or TRIVIA_ADMIN
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuestionTemplateResource} and HTTP response
     */
    this.getQuestionTemplateWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQuestionTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = QuestionTemplateResource;

      return this.apiClient.callApi(
        '/trivia/questions/templates/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single question template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or TRIVIA_ADMIN
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuestionTemplateResource}
     */
    this.getQuestionTemplate = function(id) {
      return this.getQuestionTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search question templates
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceQuestionTemplateResource} and HTTP response
     */
    this.getQuestionTemplatesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceQuestionTemplateResource;

      return this.apiClient.callApi(
        '/trivia/questions/templates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search question templates
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceQuestionTemplateResource}
     */
    this.getQuestionTemplates = function(opts) {
      return this.getQuestionTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search questions
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceQuestionResource} and HTTP response
     */
    this.getQuestionsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tagset': opts['filterTagset'],
        'filter_tag': opts['filterTag'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished'],
        'filter_import_id': opts['filterImportId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceQuestionResource;

      return this.apiClient.callApi(
        '/trivia/questions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search questions
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceQuestionResource}
     */
    this.getQuestions = function(opts) {
      return this.getQuestionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Count questions based on filters
     * This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    this.getQuestionsCountWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tag': opts['filterTag'],
        'filter_tagset': opts['filterTagset'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/trivia/questions/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Count questions based on filters
     * This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    this.getQuestionsCount = function(opts) {
      return this.getQuestionsCountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start processing an import job
     * Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Number} id The id of the job
     * @param {Boolean} publishNow Whether the new questions should be published live immediately
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImportJobResource} and HTTP response
     */
    this.processImportJobWithHttpInfo = function(id, publishNow) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling processImportJob");
      }

      // verify the required parameter 'publishNow' is set
      if (publishNow === undefined || publishNow === null) {
        throw new Error("Missing the required parameter 'publishNow' when calling processImportJob");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'publish_now': publishNow,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import/{id}/process', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Start processing an import job
     * Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Number} id The id of the job
     * @param {Boolean} publishNow Whether the new questions should be published live immediately
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImportJobResource}
     */
    this.processImportJob = function(id, publishNow) {
      return this.processImportJobWithHttpInfo(id, publishNow)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a tag from a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} id The id of the question
     * @param {String} tag The tag to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeQuestionTagWithHttpInfo = function(id, tag) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeQuestionTag");
      }

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling removeQuestionTag");
      }


      var pathParams = {
        'id': id,
        'tag': tag
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{id}/tags/{tag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a tag from a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} id The id of the question
     * @param {String} tag The tag to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeQuestionTag = function(id, tag) {
      return this.removeQuestionTagWithHttpInfo(id, tag)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a tag from a batch of questions
     * ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} tag The tag to remove
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    this.removeTagToQuestionsBatchWithHttpInfo = function(tag, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling removeTagToQuestionsBatch");
      }


      var pathParams = {
        'tag': tag
      };
      var queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tag': opts['filterTag'],
        'filter_tagset': opts['filterTagset'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished'],
        'filter_import_id': opts['filterImportId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/trivia/questions/tags/{tag}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove a tag from a batch of questions
     * ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} tag The tag to remove
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTag Filter for questions with specified tag
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    this.removeTagToQuestionsBatch = function(tag, opts) {
      return this.removeTagToQuestionsBatchWithHttpInfo(tag, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search tags by the beginning of the string
     * For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for tags starting with the given text
     * @param {String} opts.filterCategory Filter for tags on questions from a specific category
     * @param {Number} opts.filterImportId Filter for tags on questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */
    this.searchQuestionTagsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_category': opts['filterCategory'],
        'filter_import_id': opts['filterImportId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/trivia/tags', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search tags by the beginning of the string
     * For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterSearch Filter for tags starting with the given text
     * @param {String} opts.filterCategory Filter for tags on questions from a specific category
     * @param {Number} opts.filterImportId Filter for tags on questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */
    this.searchQuestionTags = function(opts) {
      return this.searchQuestionTagsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an import job
     * Changes should be made before process is started for there to be any effect. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Number} id The id of the job
     * @param {Object} opts Optional parameters
     * @param {module:model/ImportJobResource} opts.request The updated job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ImportJobResource} and HTTP response
     */
    this.updateImportJobWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['request'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateImportJob");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImportJobResource;

      return this.apiClient.callApi(
        '/trivia/import/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an import job
     * Changes should be made before process is started for there to be any effect. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Number} id The id of the job
     * @param {Object} opts Optional parameters
     * @param {module:model/ImportJobResource} opts.request The updated job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ImportJobResource}
     */
    this.updateImportJob = function(id, opts) {
      return this.updateImportJobWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} id The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question The updated question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuestionResource} and HTTP response
     */
    this.updateQuestionWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['question'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateQuestion");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuestionResource;

      return this.apiClient.callApi(
        '/trivia/questions/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} id The id of the question
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question The updated question
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuestionResource}
     */
    this.updateQuestion = function(id, opts) {
      return this.updateQuestionWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an answer for a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @param {Object} opts Optional parameters
     * @param {module:model/AnswerResource} opts.answer The updated answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateQuestionAnswerWithHttpInfo = function(questionId, id, opts) {
      opts = opts || {};
      var postBody = opts['answer'];

      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling updateQuestionAnswer");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateQuestionAnswer");
      }


      var pathParams = {
        'question_id': questionId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/trivia/questions/{question_id}/answers/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an answer for a question
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {String} questionId The id of the question
     * @param {String} id The id of the answer
     * @param {Object} opts Optional parameters
     * @param {module:model/AnswerResource} opts.answer The updated answer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateQuestionAnswer = function(questionId, id, opts) {
      return this.updateQuestionAnswerWithHttpInfo(questionId, id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a question template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionTemplateResource} opts.questionTemplateResource The question template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QuestionTemplateResource} and HTTP response
     */
    this.updateQuestionTemplateWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['questionTemplateResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateQuestionTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = QuestionTemplateResource;

      return this.apiClient.callApi(
        '/trivia/questions/templates/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a question template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionTemplateResource} opts.questionTemplateResource The question template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QuestionTemplateResource}
     */
    this.updateQuestionTemplate = function(id, opts) {
      return this.updateQuestionTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Bulk update questions
     * Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question New values for a set of question fields
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'Number'} and HTTP response
     */
    this.updateQuestionsInBulkWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['question'];


      var pathParams = {
      };
      var queryParams = {
        'filter_search': opts['filterSearch'],
        'filter_idset': opts['filterIdset'],
        'filter_category': opts['filterCategory'],
        'filter_tagset': opts['filterTagset'],
        'filter_type': opts['filterType'],
        'filter_published': opts['filterPublished'],
        'filter_import_id': opts['filterImportId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/trivia/questions', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Bulk update questions
     * Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TRIVIA_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/QuestionResource} opts.question New values for a set of question fields
     * @param {String} opts.filterSearch Filter for documents whose question, answers or tags contains provided string
     * @param {String} opts.filterIdset Filter for documents whose id is in the comma separated list provided
     * @param {String} opts.filterCategory Filter for questions with specified category, by id
     * @param {String} opts.filterTagset Filter for questions with specified tags (separated by comma)
     * @param {String} opts.filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;)
     * @param {Boolean} opts.filterPublished Filter for questions currenctly published or not
     * @param {Number} opts.filterImportId Filter for questions from a specific import job
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'Number'}
     */
    this.updateQuestionsInBulk = function(opts) {
      return this.updateQuestionsInBulkWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
