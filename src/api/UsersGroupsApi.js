/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ChatMessageRequest', 'model/ChatMessageResource', 'model/GroupMemberResource', 'model/GroupResource', 'model/PageResourceChatMessageResource', 'model/PageResourceGroupMemberResource', 'model/PageResourceGroupResource', 'model/PageResourceTemplateResource', 'model/Result', 'model/StringWrapper', 'model/TemplateResource', 'model/ValueWrapperboolean'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ChatMessageRequest'), require('../model/ChatMessageResource'), require('../model/GroupMemberResource'), require('../model/GroupResource'), require('../model/PageResourceChatMessageResource'), require('../model/PageResourceGroupMemberResource'), require('../model/PageResourceGroupResource'), require('../model/PageResourceTemplateResource'), require('../model/Result'), require('../model/StringWrapper'), require('../model/TemplateResource'), require('../model/ValueWrapperboolean'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikCloud) {
      root.KnetikCloud = {};
    }
    root.KnetikCloud.UsersGroupsApi = factory(root.KnetikCloud.ApiClient, root.KnetikCloud.ChatMessageRequest, root.KnetikCloud.ChatMessageResource, root.KnetikCloud.GroupMemberResource, root.KnetikCloud.GroupResource, root.KnetikCloud.PageResourceChatMessageResource, root.KnetikCloud.PageResourceGroupMemberResource, root.KnetikCloud.PageResourceGroupResource, root.KnetikCloud.PageResourceTemplateResource, root.KnetikCloud.Result, root.KnetikCloud.StringWrapper, root.KnetikCloud.TemplateResource, root.KnetikCloud.ValueWrapperboolean);
  }
}(this, function(ApiClient, ChatMessageRequest, ChatMessageResource, GroupMemberResource, GroupResource, PageResourceChatMessageResource, PageResourceGroupMemberResource, PageResourceGroupResource, PageResourceTemplateResource, Result, StringWrapper, TemplateResource, ValueWrapperboolean) {
  'use strict';

  /**
   * UsersGroups service.
   * @module api/UsersGroupsApi
   * @version 3.0.11
   */

  /**
   * Constructs a new UsersGroupsApi. 
   * @alias module:api/UsersGroupsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Adds a new member to the group
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; POST or JOIN if self
     * @param {String} uniqueName The group unique name
     * @param {module:model/GroupMemberResource} user The id and status for a user to add to the group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupMemberResource} and HTTP response
     */
    this.addMemberToGroupWithHttpInfo = function(uniqueName, user) {
      var postBody = user;

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling addMemberToGroup");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling addMemberToGroup");
      }


      var pathParams = {
        'unique_name': uniqueName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupMemberResource;

      return this.apiClient.callApi(
        '/users/groups/{unique_name}/members', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a new member to the group
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; POST or JOIN if self
     * @param {String} uniqueName The group unique name
     * @param {module:model/GroupMemberResource} user The id and status for a user to add to the group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupMemberResource}
     */
    this.addMemberToGroup = function(uniqueName, user) {
      return this.addMemberToGroupWithHttpInfo(uniqueName, user)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds multiple members to the group
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; POST
     * @param {String} uniqueName The group unique name
     * @param {Array.<module:model/GroupMemberResource>} users The id and status for a list of users to add to the group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GroupMemberResource>} and HTTP response
     */
    this.addMembersToGroupWithHttpInfo = function(uniqueName, users) {
      var postBody = users;

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling addMembersToGroup");
      }

      // verify the required parameter 'users' is set
      if (users === undefined || users === null) {
        throw new Error("Missing the required parameter 'users' when calling addMembersToGroup");
      }


      var pathParams = {
        'unique_name': uniqueName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [GroupMemberResource];

      return this.apiClient.callApi(
        '/users/groups/{unique_name}/members/batch-add', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds multiple members to the group
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; POST
     * @param {String} uniqueName The group unique name
     * @param {Array.<module:model/GroupMemberResource>} users The id and status for a list of users to add to the group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GroupMemberResource>}
     */
    this.addMembersToGroup = function(uniqueName, users) {
      return this.addMembersToGroupWithHttpInfo(uniqueName, users)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a group
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; POST
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupResource} opts.groupResource The new group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupResource} and HTTP response
     */
    this.createGroupWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['groupResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GroupResource;

      return this.apiClient.callApi(
        '/users/groups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a group
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; POST
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupResource} opts.groupResource The new group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupResource}
     */
    this.createGroup = function(opts) {
      return this.createGroupWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an group member template
     * GroupMember Templates define a type of group member and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.groupMemberTemplateResource The group member template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    this.createGroupMemberTemplateWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['groupMemberTemplateResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/users/groups/members/templates', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create an group member template
     * GroupMember Templates define a type of group member and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.groupMemberTemplateResource The group member template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    this.createGroupMemberTemplate = function(opts) {
      return this.createGroupMemberTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a group template
     * Group Templates define a type of group and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.groupTemplateResource The group template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    this.createGroupTemplateWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['groupTemplateResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/users/groups/templates', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a group template
     * Group Templates define a type of group and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.groupTemplateResource The group template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    this.createGroupTemplate = function(opts) {
      return this.createGroupTemplateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a group from the system
     * All groups listing this as the parent are also removed and users are in turn removed from this and those groups. This may result in users no longer being in this group&#39;s parent if they were not added to it directly as well. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; DELETE
     * @param {String} uniqueName The group unique name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteGroupWithHttpInfo = function(uniqueName) {
      var postBody = null;

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling deleteGroup");
      }


      var pathParams = {
        'unique_name': uniqueName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/groups/{unique_name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a group from the system
     * All groups listing this as the parent are also removed and users are in turn removed from this and those groups. This may result in users no longer being in this group&#39;s parent if they were not added to it directly as well. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; DELETE
     * @param {String} uniqueName The group unique name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteGroup = function(uniqueName) {
      return this.deleteGroupWithHttpInfo(uniqueName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an group member template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteGroupMemberTemplateWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGroupMemberTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'cascade': opts['cascade'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/groups/members/templates/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete an group member template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteGroupMemberTemplate = function(id, opts) {
      return this.deleteGroupMemberTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a group template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteGroupTemplateWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGroupTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'cascade': opts['cascade'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/groups/templates/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a group template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteGroupTemplate = function(id, opts) {
      return this.deleteGroupTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Enable or disable notification of group messages
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TOPICS_ADMIN or self
     * @param {String} uniqueName The group unique name
     * @param {String} userId The user id of the member or &#39;me&#39;
     * @param {module:model/ValueWrapperboolean} disabled disabled
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.disableGroupNotificationWithHttpInfo = function(uniqueName, userId, disabled) {
      var postBody = disabled;

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling disableGroupNotification");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling disableGroupNotification");
      }

      // verify the required parameter 'disabled' is set
      if (disabled === undefined || disabled === null) {
        throw new Error("Missing the required parameter 'disabled' when calling disableGroupNotification");
      }


      var pathParams = {
        'unique_name': uniqueName,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/groups/{unique_name}/members/{user_id}/messages/disabled', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Enable or disable notification of group messages
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TOPICS_ADMIN or self
     * @param {String} uniqueName The group unique name
     * @param {String} userId The user id of the member or &#39;me&#39;
     * @param {module:model/ValueWrapperboolean} disabled disabled
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.disableGroupNotification = function(uniqueName, userId, disabled) {
      return this.disableGroupNotificationWithHttpInfo(uniqueName, userId, disabled)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Loads a specific group&#39;s details
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; GET
     * @param {String} uniqueName The group unique name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupResource} and HTTP response
     */
    this.getGroupWithHttpInfo = function(uniqueName) {
      var postBody = null;

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling getGroup");
      }


      var pathParams = {
        'unique_name': uniqueName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GroupResource;

      return this.apiClient.callApi(
        '/users/groups/{unique_name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Loads a specific group&#39;s details
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; GET
     * @param {String} uniqueName The group unique name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupResource}
     */
    this.getGroup = function(uniqueName) {
      return this.getGroupWithHttpInfo(uniqueName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get group ancestors
     * Returns a list of ancestor groups in reverse order (parent, then grandparent, etc). &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {String} uniqueName The group unique name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GroupResource>} and HTTP response
     */
    this.getGroupAncestorsWithHttpInfo = function(uniqueName) {
      var postBody = null;

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling getGroupAncestors");
      }


      var pathParams = {
        'unique_name': uniqueName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GroupResource];

      return this.apiClient.callApi(
        '/users/groups/{unique_name}/ancestors', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get group ancestors
     * Returns a list of ancestor groups in reverse order (parent, then grandparent, etc). &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {String} uniqueName The group unique name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GroupResource>}
     */
    this.getGroupAncestors = function(uniqueName) {
      return this.getGroupAncestorsWithHttpInfo(uniqueName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a user from a group
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; GET
     * @param {String} uniqueName The group unique name
     * @param {Number} userId The id of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupMemberResource} and HTTP response
     */
    this.getGroupMemberWithHttpInfo = function(uniqueName, userId) {
      var postBody = null;

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling getGroupMember");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getGroupMember");
      }


      var pathParams = {
        'unique_name': uniqueName,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GroupMemberResource;

      return this.apiClient.callApi(
        '/users/groups/{unique_name}/members/{user_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a user from a group
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; GET
     * @param {String} uniqueName The group unique name
     * @param {Number} userId The id of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupMemberResource}
     */
    this.getGroupMember = function(uniqueName, userId) {
      return this.getGroupMemberWithHttpInfo(uniqueName, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single group member template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or GROUP_ADMIN
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    this.getGroupMemberTemplateWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupMemberTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/users/groups/members/templates/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single group member template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or GROUP_ADMIN
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    this.getGroupMemberTemplate = function(id) {
      return this.getGroupMemberTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search group member templates
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or GROUP_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceTemplateResource} and HTTP response
     */
    this.getGroupMemberTemplatesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceTemplateResource;

      return this.apiClient.callApi(
        '/users/groups/members/templates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search group member templates
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or GROUP_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceTemplateResource}
     */
    this.getGroupMemberTemplates = function(opts) {
      return this.getGroupMemberTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Lists members of the group
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; LIST
     * @param {String} uniqueName The group unique name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to order:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceGroupMemberResource} and HTTP response
     */
    this.getGroupMembersWithHttpInfo = function(uniqueName, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling getGroupMembers");
      }


      var pathParams = {
        'unique_name': uniqueName
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceGroupMemberResource;

      return this.apiClient.callApi(
        '/users/groups/{unique_name}/members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Lists members of the group
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; LIST
     * @param {String} uniqueName The group unique name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to order:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceGroupMemberResource}
     */
    this.getGroupMembers = function(uniqueName, opts) {
      return this.getGroupMembersWithHttpInfo(uniqueName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of group messages
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {String} uniqueName The group unique name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceChatMessageResource} and HTTP response
     */
    this.getGroupMessagesWithHttpInfo = function(uniqueName, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling getGroupMessages");
      }


      var pathParams = {
        'unique_name': uniqueName
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceChatMessageResource;

      return this.apiClient.callApi(
        '/users/groups/{unique_name}/messages', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of group messages
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     * @param {String} uniqueName The group unique name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceChatMessageResource}
     */
    this.getGroupMessages = function(uniqueName, opts) {
      return this.getGroupMessagesWithHttpInfo(uniqueName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a single group template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or GROUP_ADMIN
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    this.getGroupTemplateWithHttpInfo = function(id) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/users/groups/templates/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a single group template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or GROUP_ADMIN
     * @param {String} id The id of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    this.getGroupTemplate = function(id) {
      return this.getGroupTemplateWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search group templates
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or GROUP_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceTemplateResource} and HTTP response
     */
    this.getGroupTemplatesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceTemplateResource;

      return this.apiClient.callApi(
        '/users/groups/templates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search group templates
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or GROUP_ADMIN
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceTemplateResource}
     */
    this.getGroupTemplates = function(opts) {
      return this.getGroupTemplatesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List groups a user is in
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; LIST_GROUPS
     * @param {Number} userId The id of the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterChildren Whether to limit group list to children of groups only. If true, shows only groups with parents. If false, shows only groups with no parent.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */
    this.getGroupsForUserWithHttpInfo = function(userId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getGroupsForUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'filter_children': opts['filterChildren'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/users/{user_id}/groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List groups a user is in
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; LIST_GROUPS
     * @param {Number} userId The id of the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterChildren Whether to limit group list to children of groups only. If true, shows only groups with parents. If false, shows only groups with no parent.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */
    this.getGroupsForUser = function(userId, opts) {
      return this.getGroupsForUserWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and search groups
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; LIST
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterTemplate Filter for groups using a specific template, by id
     * @param {String} opts.filterMemberCount Filters groups by member count. Multiple values possible for range search. Format: filter_member_count&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ). Ex: filter_member_count&#x3D;GT,14,LT,17
     * @param {String} opts.filterName Filter for groups with names starting with the given string
     * @param {String} opts.filterUniqueName Filter for groups whose unique_name starts with provided string
     * @param {String} opts.filterParent Filter for groups with a specific parent, by unique name
     * @param {module:model/String} opts.filterStatus Filter for groups with a certain status
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to name:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PageResourceGroupResource} and HTTP response
     */
    this.listGroupsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_template': opts['filterTemplate'],
        'filter_member_count': opts['filterMemberCount'],
        'filter_name': opts['filterName'],
        'filter_unique_name': opts['filterUniqueName'],
        'filter_parent': opts['filterParent'],
        'filter_status': opts['filterStatus'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PageResourceGroupResource;

      return this.apiClient.callApi(
        '/users/groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and search groups
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; LIST
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterTemplate Filter for groups using a specific template, by id
     * @param {String} opts.filterMemberCount Filters groups by member count. Multiple values possible for range search. Format: filter_member_count&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ). Ex: filter_member_count&#x3D;GT,14,LT,17
     * @param {String} opts.filterName Filter for groups with names starting with the given string
     * @param {String} opts.filterUniqueName Filter for groups whose unique_name starts with provided string
     * @param {String} opts.filterParent Filter for groups with a specific parent, by unique name
     * @param {module:model/String} opts.filterStatus Filter for groups with a certain status
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to name:ASC)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PageResourceGroupResource}
     */
    this.listGroups = function(opts) {
      return this.listGroupsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Send a group message
     * @param {String} uniqueName The group unique name
     * @param {Object} opts Optional parameters
     * @param {module:model/ChatMessageRequest} opts.chatMessageRequest The chat message request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChatMessageResource} and HTTP response
     */
    this.postGroupMessageWithHttpInfo = function(uniqueName, opts) {
      opts = opts || {};
      var postBody = opts['chatMessageRequest'];

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling postGroupMessage");
      }


      var pathParams = {
        'unique_name': uniqueName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChatMessageResource;

      return this.apiClient.callApi(
        '/users/groups/{unique_name}/messages', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Send a group message
     * @param {String} uniqueName The group unique name
     * @param {Object} opts Optional parameters
     * @param {module:model/ChatMessageRequest} opts.chatMessageRequest The chat message request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChatMessageResource}
     */
    this.postGroupMessage = function(uniqueName, opts) {
      return this.postGroupMessageWithHttpInfo(uniqueName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes a user from a group
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; DELETE
     * @param {String} uniqueName The group unique name
     * @param {Number} userId The id of the user to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeGroupMemberWithHttpInfo = function(uniqueName, userId) {
      var postBody = null;

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling removeGroupMember");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeGroupMember");
      }


      var pathParams = {
        'unique_name': uniqueName,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/groups/{unique_name}/members/{user_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes a user from a group
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; DELETE
     * @param {String} uniqueName The group unique name
     * @param {Number} userId The id of the user to remove
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeGroupMember = function(uniqueName, userId) {
      return this.removeGroupMemberWithHttpInfo(uniqueName, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a group
     * If adding/removing/changing parent, user membership in group/new parent groups may be modified. The parent being removed will remove members from this sub group unless they were added explicitly to the parent and the new parent will gain members unless they were already a part of it. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     * @param {String} uniqueName The group unique name
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupResource} opts.groupResource The updated group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateGroupWithHttpInfo = function(uniqueName, opts) {
      opts = opts || {};
      var postBody = opts['groupResource'];

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling updateGroup");
      }


      var pathParams = {
        'unique_name': uniqueName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/groups/{unique_name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a group
     * If adding/removing/changing parent, user membership in group/new parent groups may be modified. The parent being removed will remove members from this sub group unless they were added explicitly to the parent and the new parent will gain members unless they were already a part of it. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     * @param {String} uniqueName The group unique name
     * @param {Object} opts Optional parameters
     * @param {module:model/GroupResource} opts.groupResource The updated group
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateGroup = function(uniqueName, opts) {
      return this.updateGroupWithHttpInfo(uniqueName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change a user&#39;s order
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     * @param {String} uniqueName The group unique name
     * @param {Number} userId The user id of the member to modify
     * @param {module:model/StringWrapper} order The new order for the membership
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateGroupMemberPropertiesWithHttpInfo = function(uniqueName, userId, order) {
      var postBody = order;

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling updateGroupMemberProperties");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateGroupMemberProperties");
      }

      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling updateGroupMemberProperties");
      }


      var pathParams = {
        'unique_name': uniqueName,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/groups/{unique_name}/members/{user_id}/order', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change a user&#39;s order
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     * @param {String} uniqueName The group unique name
     * @param {Number} userId The user id of the member to modify
     * @param {module:model/StringWrapper} order The new order for the membership
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateGroupMemberProperties = function(uniqueName, userId, order) {
      return this.updateGroupMemberPropertiesWithHttpInfo(uniqueName, userId, order)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change a user&#39;s membership properties
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     * @param {String} uniqueName The group unique name
     * @param {Number} userId The user id of the member to modify
     * @param {Object} properties The new properties for the membership
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateGroupMemberProperties1WithHttpInfo = function(uniqueName, userId, properties) {
      var postBody = properties;

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling updateGroupMemberProperties1");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateGroupMemberProperties1");
      }

      // verify the required parameter 'properties' is set
      if (properties === undefined || properties === null) {
        throw new Error("Missing the required parameter 'properties' when calling updateGroupMemberProperties1");
      }


      var pathParams = {
        'unique_name': uniqueName,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/groups/{unique_name}/members/{user_id}/properties', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change a user&#39;s membership properties
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     * @param {String} uniqueName The group unique name
     * @param {Number} userId The user id of the member to modify
     * @param {Object} properties The new properties for the membership
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateGroupMemberProperties1 = function(uniqueName, userId, properties) {
      return this.updateGroupMemberProperties1WithHttpInfo(uniqueName, userId, properties)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Change a user&#39;s status
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     * @param {String} uniqueName The group unique name
     * @param {Number} userId The user id of the member to modify
     * @param {module:model/StringWrapper} status The new status for the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updateGroupMemberStatusWithHttpInfo = function(uniqueName, userId, status) {
      var postBody = status;

      // verify the required parameter 'uniqueName' is set
      if (uniqueName === undefined || uniqueName === null) {
        throw new Error("Missing the required parameter 'uniqueName' when calling updateGroupMemberStatus");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateGroupMemberStatus");
      }

      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateGroupMemberStatus");
      }


      var pathParams = {
        'unique_name': uniqueName,
        'user_id': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/groups/{unique_name}/members/{user_id}/status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Change a user&#39;s status
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     * @param {String} uniqueName The group unique name
     * @param {Number} userId The user id of the member to modify
     * @param {module:model/StringWrapper} status The new status for the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updateGroupMemberStatus = function(uniqueName, userId, status) {
      return this.updateGroupMemberStatusWithHttpInfo(uniqueName, userId, status)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an group member template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.groupMemberTemplateResource The group member template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    this.updateGroupMemberTemplateWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['groupMemberTemplateResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroupMemberTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/users/groups/members/templates/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an group member template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.groupMemberTemplateResource The group member template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    this.updateGroupMemberTemplate = function(id, opts) {
      return this.updateGroupMemberTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a group template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.groupTemplateResource The group template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TemplateResource} and HTTP response
     */
    this.updateGroupTemplateWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['groupTemplateResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateGroupTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2_client_credentials_grant', 'oauth2_password_grant'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/users/groups/templates/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a group template
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.groupTemplateResource The group template resource object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TemplateResource}
     */
    this.updateGroupTemplate = function(id, opts) {
      return this.updateGroupTemplateWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
