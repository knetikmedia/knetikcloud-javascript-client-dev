/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PropertyDefinitionResource', 'model/PropertyFieldListResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./PropertyDefinitionResource'), require('./PropertyFieldListResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikCloud) {
      root.KnetikCloud = {};
    }
    root.KnetikCloud.VideoPropertyDefinitionResource = factory(root.KnetikCloud.ApiClient, root.KnetikCloud.PropertyDefinitionResource, root.KnetikCloud.PropertyFieldListResource);
  }
}(this, function(ApiClient, PropertyDefinitionResource, PropertyFieldListResource) {
  'use strict';




  /**
   * The VideoPropertyDefinitionResource model module.
   * @module model/VideoPropertyDefinitionResource
   * @version 3.0.11
   */

  /**
   * Constructs a new <code>VideoPropertyDefinitionResource</code>.
   * @alias module:model/VideoPropertyDefinitionResource
   * @class
   * @extends module:model/PropertyDefinitionResource
   * @param name {String} The name of the property
   * @param required {Boolean} Whether the property is required
   * @param type {String} The type of the property. Used for polymorphic type recognition and thus must match an expected type with additional properties.
   */
  var exports = function(name, required, type) {
    var _this = this;
    PropertyDefinitionResource.call(_this, name, required, type);







  };

  /**
   * Constructs a <code>VideoPropertyDefinitionResource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VideoPropertyDefinitionResource} obj Optional instance to populate.
   * @return {module:model/VideoPropertyDefinitionResource} The populated <code>VideoPropertyDefinitionResource</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      PropertyDefinitionResource.constructFromObject(data, obj);
      if (data.hasOwnProperty('file_type')) {
        obj['file_type'] = ApiClient.convertToType(data['file_type'], 'String');
      }
      if (data.hasOwnProperty('max_height')) {
        obj['max_height'] = ApiClient.convertToType(data['max_height'], 'Number');
      }
      if (data.hasOwnProperty('max_length')) {
        obj['max_length'] = ApiClient.convertToType(data['max_length'], 'Number');
      }
      if (data.hasOwnProperty('max_width')) {
        obj['max_width'] = ApiClient.convertToType(data['max_width'], 'Number');
      }
      if (data.hasOwnProperty('min_height')) {
        obj['min_height'] = ApiClient.convertToType(data['min_height'], 'Number');
      }
      if (data.hasOwnProperty('min_length')) {
        obj['min_length'] = ApiClient.convertToType(data['min_length'], 'Number');
      }
      if (data.hasOwnProperty('min_width')) {
        obj['min_width'] = ApiClient.convertToType(data['min_width'], 'Number');
      }
    }
    return obj;
  }

  exports.registerChild = function(child, discriminatorValue) {
	  child.discriminatorField = exports.discriminatorField;
	  child.discriminatorValue = discriminatorValue;
	  child.parent = exports;
	  if(exports.children == null)
		  exports.children = {};
	  exports.children[discriminatorValue] = child;
	  if(exports.parent != null)
		  exports.parent.registerChild(child, discriminatorValue);
  }
  
  var discriminatorValue = 'video';
  PropertyDefinitionResource.registerChild(exports, discriminatorValue);
  
  exports.prototype = Object.create(PropertyDefinitionResource.prototype);
  exports.prototype.constructor = exports;


  /**
   * If provided, a file type that teh property must match
   * @member {String} file_type
   */
  exports.prototype['file_type'] = undefined;
  /**
   * If provided, the maximum height of the video
   * @member {Number} max_height
   */
  exports.prototype['max_height'] = undefined;
  /**
   * If provided, the maximum length of the video
   * @member {Number} max_length
   */
  exports.prototype['max_length'] = undefined;
  /**
   * If provided, the maximum width of the video
   * @member {Number} max_width
   */
  exports.prototype['max_width'] = undefined;
  /**
   * If provided, the minimum height of the video
   * @member {Number} min_height
   */
  exports.prototype['min_height'] = undefined;
  /**
   * If provided, the minimum length of the video
   * @member {Number} min_length
   */
  exports.prototype['min_length'] = undefined;
  /**
   * If provided, the minimum width of the video
   * @member {Number} min_width
   */
  exports.prototype['min_width'] = undefined;



  return exports;
}));


