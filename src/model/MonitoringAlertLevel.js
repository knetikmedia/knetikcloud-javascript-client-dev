/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikCloud) {
      root.KnetikCloud = {};
    }
    root.KnetikCloud.MonitoringAlertLevel = factory(root.KnetikCloud.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The MonitoringAlertLevel model module.
   * @module model/MonitoringAlertLevel
   * @version 3.0.11
   */

  /**
   * Constructs a new <code>MonitoringAlertLevel</code>.
   * @alias module:model/MonitoringAlertLevel
   * @class
   * @param comparisonOperator {module:model/MonitoringAlertLevel.ComparisonOperatorEnum} The operator to compare values to the threshold levels. The period's value is the left hand side. When true, the alert is triggered
   * @param datapointsToAlert {Number} How many periods out of the evaluation_periods must match the test before the alert is triggered. Minimum 1
   * @param evaluationPeriods {Number} The number of periods to evaluate each time. Period multiplied by evaluation_periods cannot be greater than 86,400 seconds (1 day)
   * @param name {String} The name of the alert level
   * @param period {Number} The number of seconds to take each datapoint from. If multiple points fall in a period, they are combined according to the aggregation type selected. Value must be a multiple of 60 unless the metric is high_resolution, in which case 10 and 30 are allowed as well. Period multiplied by evaluation_periods cannot be greater than 86,400 seconds (1 day)
   * @param threshold {Number} The value each period will be compared to
   */
  var exports = function(comparisonOperator, datapointsToAlert, evaluationPeriods, name, period, threshold) {
    var _this = this;

    _this['comparison_operator'] = comparisonOperator;
    _this['datapoints_to_alert'] = datapointsToAlert;
    _this['evaluation_periods'] = evaluationPeriods;

    _this['name'] = name;
    _this['period'] = period;
    _this['threshold'] = threshold;
  };

  /**
   * Constructs a <code>MonitoringAlertLevel</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MonitoringAlertLevel} obj Optional instance to populate.
   * @return {module:model/MonitoringAlertLevel} The populated <code>MonitoringAlertLevel</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('comparison_operator')) {
        obj['comparison_operator'] = ApiClient.convertToType(data['comparison_operator'], 'String');
      }
      if (data.hasOwnProperty('datapoints_to_alert')) {
        obj['datapoints_to_alert'] = ApiClient.convertToType(data['datapoints_to_alert'], 'Number');
      }
      if (data.hasOwnProperty('evaluation_periods')) {
        obj['evaluation_periods'] = ApiClient.convertToType(data['evaluation_periods'], 'Number');
      }
      if (data.hasOwnProperty('missing_data_policy')) {
        obj['missing_data_policy'] = ApiClient.convertToType(data['missing_data_policy'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('period')) {
        obj['period'] = ApiClient.convertToType(data['period'], 'Number');
      }
      if (data.hasOwnProperty('threshold')) {
        obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
      }
    }
    return obj;
  }

  exports.registerChild = function(child, discriminatorValue) {
	  child.discriminatorField = exports.discriminatorField;
	  child.discriminatorValue = discriminatorValue;
	  child.parent = exports;
	  if(exports.children == null)
		  exports.children = {};
	  exports.children[discriminatorValue] = child;
	  if(exports.parent != null)
		  exports.parent.registerChild(child, discriminatorValue);
  }
  
  var discriminatorValue = 'MonitoringAlertLevel';


  /**
   * The operator to compare values to the threshold levels. The period's value is the left hand side. When true, the alert is triggered
   * @member {module:model/MonitoringAlertLevel.ComparisonOperatorEnum} comparison_operator
   */
  exports.prototype['comparison_operator'] = undefined;
  /**
   * How many periods out of the evaluation_periods must match the test before the alert is triggered. Minimum 1
   * @member {Number} datapoints_to_alert
   */
  exports.prototype['datapoints_to_alert'] = undefined;
  /**
   * The number of periods to evaluate each time. Period multiplied by evaluation_periods cannot be greater than 86,400 seconds (1 day)
   * @member {Number} evaluation_periods
   */
  exports.prototype['evaluation_periods'] = undefined;
  /**
   * How to handle periods with no datapoints, when there are fewer periods with data than the evaluation_periods. Default: missing
   * @member {module:model/MonitoringAlertLevel.MissingDataPolicyEnum} missing_data_policy
   */
  exports.prototype['missing_data_policy'] = undefined;
  /**
   * The name of the alert level
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The number of seconds to take each datapoint from. If multiple points fall in a period, they are combined according to the aggregation type selected. Value must be a multiple of 60 unless the metric is high_resolution, in which case 10 and 30 are allowed as well. Period multiplied by evaluation_periods cannot be greater than 86,400 seconds (1 day)
   * @member {Number} period
   */
  exports.prototype['period'] = undefined;
  /**
   * The value each period will be compared to
   * @member {Number} threshold
   */
  exports.prototype['threshold'] = undefined;


  /**
   * Allowed values for the <code>comparison_operator</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ComparisonOperatorEnum = {
    /**
     * value: "greater_than"
     * @const
     */
    "greater_than": "greater_than",
    /**
     * value: "less_than"
     * @const
     */
    "less_than": "less_than",
    /**
     * value: "greater_or_equal"
     * @const
     */
    "greater_or_equal": "greater_or_equal",
    /**
     * value: "less_or_equal"
     * @const
     */
    "less_or_equal": "less_or_equal"  };

  /**
   * Allowed values for the <code>missing_data_policy</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MissingDataPolicyEnum = {
    /**
     * value: "breaching"
     * @const
     */
    "breaching": "breaching",
    /**
     * value: "notBreaching"
     * @const
     */
    "notBreaching": "notBreaching",
    /**
     * value: "ignore"
     * @const
     */
    "ignore": "ignore",
    /**
     * value: "missing"
     * @const
     */
    "missing": "missing"  };


  return exports;
}));


