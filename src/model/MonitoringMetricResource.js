/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DimensionSet'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./DimensionSet'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikCloud) {
      root.KnetikCloud = {};
    }
    root.KnetikCloud.MonitoringMetricResource = factory(root.KnetikCloud.ApiClient, root.KnetikCloud.DimensionSet);
  }
}(this, function(ApiClient, DimensionSet) {
  'use strict';




  /**
   * The MonitoringMetricResource model module.
   * @module model/MonitoringMetricResource
   * @version 3.0.11
   */

  /**
   * Constructs a new <code>MonitoringMetricResource</code>.
   * @alias module:model/MonitoringMetricResource
   * @class
   * @param dimensionSets {Array.<module:model/DimensionSet>} The sets of dimensions that datapoints may be recorded with (each datapoint must have dimensions keys exactly matching one of these sets)
   * @param id {String} The id of the metric. Cannot be changed
   */
  var exports = function(dimensionSets, id) {
    var _this = this;

    _this['dimension_sets'] = dimensionSets;

    _this['id'] = id;


  };

  /**
   * Constructs a <code>MonitoringMetricResource</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MonitoringMetricResource} obj Optional instance to populate.
   * @return {module:model/MonitoringMetricResource} The populated <code>MonitoringMetricResource</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('dimension_sets')) {
        obj['dimension_sets'] = ApiClient.convertToType(data['dimension_sets'], [DimensionSet]);
      }
      if (data.hasOwnProperty('high_resolution')) {
        obj['high_resolution'] = ApiClient.convertToType(data['high_resolution'], 'Boolean');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('unit')) {
        obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
      }
    }
    return obj;
  }

  exports.registerChild = function(child, discriminatorValue) {
	  child.discriminatorField = exports.discriminatorField;
	  child.discriminatorValue = discriminatorValue;
	  child.parent = exports;
	  if(exports.children == null)
		  exports.children = {};
	  exports.children[discriminatorValue] = child;
	  if(exports.parent != null)
		  exports.parent.registerChild(child, discriminatorValue);
  }
  
  var discriminatorValue = 'MonitoringMetricResource';


  /**
   * The sets of dimensions that datapoints may be recorded with (each datapoint must have dimensions keys exactly matching one of these sets)
   * @member {Array.<module:model/DimensionSet>} dimension_sets
   */
  exports.prototype['dimension_sets'] = undefined;
  /**
   * Whether this metric is measured each second. If false, it is measured each minute. Multiple datapoints in the same period will be combined. Default: false
   * @member {Boolean} high_resolution
   */
  exports.prototype['high_resolution'] = undefined;
  /**
   * The id of the metric. Cannot be changed
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The name of the metric, for display purposes. Will default if not provided
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The unit used by the metric
   * @member {module:model/MonitoringMetricResource.UnitEnum} unit
   */
  exports.prototype['unit'] = undefined;


  /**
   * Allowed values for the <code>unit</code> property.
   * @enum {String}
   * @readonly
   */
  exports.UnitEnum = {
    /**
     * value: "Seconds"
     * @const
     */
    "Seconds": "Seconds",
    /**
     * value: "Microseconds"
     * @const
     */
    "Microseconds": "Microseconds",
    /**
     * value: "Milliseconds"
     * @const
     */
    "Milliseconds": "Milliseconds",
    /**
     * value: "Bytes"
     * @const
     */
    "Bytes": "Bytes",
    /**
     * value: "Kilobytes"
     * @const
     */
    "Kilobytes": "Kilobytes",
    /**
     * value: "Megabytes"
     * @const
     */
    "Megabytes": "Megabytes",
    /**
     * value: "Gigabytes"
     * @const
     */
    "Gigabytes": "Gigabytes",
    /**
     * value: "Terabytes"
     * @const
     */
    "Terabytes": "Terabytes",
    /**
     * value: "Bits"
     * @const
     */
    "Bits": "Bits",
    /**
     * value: "Kilobits"
     * @const
     */
    "Kilobits": "Kilobits",
    /**
     * value: "Megabits"
     * @const
     */
    "Megabits": "Megabits",
    /**
     * value: "Gigabits"
     * @const
     */
    "Gigabits": "Gigabits",
    /**
     * value: "Terabits"
     * @const
     */
    "Terabits": "Terabits",
    /**
     * value: "Percent"
     * @const
     */
    "Percent": "Percent",
    /**
     * value: "Count"
     * @const
     */
    "Count": "Count",
    /**
     * value: "BytesSecond"
     * @const
     */
    "BytesSecond": "BytesSecond",
    /**
     * value: "KilobytesSecond"
     * @const
     */
    "KilobytesSecond": "KilobytesSecond",
    /**
     * value: "MegabytesSecond"
     * @const
     */
    "MegabytesSecond": "MegabytesSecond",
    /**
     * value: "GigabytesSecond"
     * @const
     */
    "GigabytesSecond": "GigabytesSecond",
    /**
     * value: "TerabytesSecond"
     * @const
     */
    "TerabytesSecond": "TerabytesSecond",
    /**
     * value: "BitsSecond"
     * @const
     */
    "BitsSecond": "BitsSecond",
    /**
     * value: "KilobitsSecond"
     * @const
     */
    "KilobitsSecond": "KilobitsSecond",
    /**
     * value: "MegabitsSecond"
     * @const
     */
    "MegabitsSecond": "MegabitsSecond",
    /**
     * value: "GigabitsSecond"
     * @const
     */
    "GigabitsSecond": "GigabitsSecond",
    /**
     * value: "TerabitsSecond"
     * @const
     */
    "TerabitsSecond": "TerabitsSecond",
    /**
     * value: "CountSecond"
     * @const
     */
    "CountSecond": "CountSecond",
    /**
     * value: "None"
     * @const
     */
    "None": "None"  };


  return exports;
}));


